# HCID grid
library(raster)
library(gdalUtils)
library(ncdf4)
library(magrittr)
rm(list = ls())
# Resample Rasters - yy.yy to xx.xx degrees
pth_files <- "D:/Dropbox/IIASA/cwatm-dataCollection/modis_lc"
files <- list.files(pth_files, full.names = TRUE, pattern = ".tif$")
### See and refer to comments in Excel file how to convert GLC to CWATM
### check how to build netcdf files in r -
### that contains 6 GEO2D data layers (fraction forest,.. grassland, irrigated land, paddy irrigated land, sealed land, and water)
### & 3 dimesnions == lat, lon, time
landCoverLegend <- openxlsx::read.xlsx(list.files(pth_files, full.names = TRUE, pattern = ".xlsx$"),
sheet = 1, rows = 1:17, cols = c(1:2, 4:5))
cwatm_modis <- openxlsx::read.xlsx(list.files(pth_files, full.names = TRUE, pattern = ".xlsx$"),
sheet = 1, rows = 1:7, cols = 8:10)
# create data frame with lan, lot, years and 6 vars:...
tmp <- do.call("rbind", lapply(files[1:3], function(file) {
print(file)
anno_inds <-regexec("A[0-2]+",file)
anno <- substr(file, anno_inds[[1]][1] + 1, anno_inds[[1]][1] + 4)
tmp_lc <- raster(file)
tmp_lc[] <- tmp_lc[] + 1
do.call("rbind", lapply(100:105, function(lc) {
print(lc)
modis_cat <- landCoverLegend[landCoverLegend$CWATM2 %in% lc, "Value"] + 1
if(length(modis_cat) == 0) modis_cat <- -10^6
tmp_lc[!tmp_lc[] %in% modis_cat]  <- 0
tmp_lc[tmp_lc[] %in% modis_cat]  <- 1
lc_agg <- aggregate(tmp_lc, fact = 2, fun = sum, na.rm = TRUE)
lc_agg[] <- lc_agg[] / 4
df_lc <- as.data.frame(rasterToPoints(lc_agg))
names(df_lc)[3] <- "share"
df_lc$landCover <- cwatm_modis[cwatm_modis$ID %in% lc, "Description"]
df_lc$time <- as.numeric(anno)
return(df_lc)
}))
}))
df_lc <- as.data.frame(tidyr::spread(tmp, landCover, share, fill = 0))
df_lc %>% head
ncpath  <- "./"
getwd()
ncname  <- "fractionLandcover"
ncfname <- paste(ncpath, ncname, ".nc", sep ="")
dname   <- "fractionLandcover"
# extent xmax. xmin, ymax, ymin
bb_israelCase <- c(35.3, 34.62, 31.6, 32.26)
# Resample Rasters - yy.yy to xx.xx degrees
pth_files <- "D:/Dropbox/IIASA/cwatm-dataCollection/modis_lc"
files <- list.files(pth_files, full.names = TRUE, pattern = ".tif$")
landCoverLegend <- openxlsx::read.xlsx(list.files(pth_files, full.names = TRUE, pattern = ".xlsx$"),
sheet = 1, rows = 1:17, cols = c(1:2, 4:5))
cwatm_modis <- openxlsx::read.xlsx(list.files(pth_files, full.names = TRUE, pattern = ".xlsx$"),
sheet = 1, rows = 1:7, cols = 8:10)
tmp <- do.call("rbind", lapply(files[1:3], function(file) {
print(file)
anno_inds <-regexec("A[0-2]+",file)
anno <- substr(file, anno_inds[[1]][1] + 1, anno_inds[[1]][1] + 4)
tmp_lc <- raster(file)
tmp_lc[] <- tmp_lc[] + 1
do.call("rbind", lapply(100:105, function(lc) {
print(lc)
modis_cat <- landCoverLegend[landCoverLegend$CWATM2 %in% lc, "Value"] + 1
if(length(modis_cat) == 0) modis_cat <- -10^6
tmp_lc[!tmp_lc[] %in% modis_cat]  <- 0
tmp_lc[tmp_lc[] %in% modis_cat]  <- 1
lc_agg <- aggregate(tmp_lc, fact = 2, fun = sum, na.rm = TRUE)
lc_agg[] <- lc_agg[] / 4
df_lc <- as.data.frame(rasterToPoints(lc_agg))
names(df_lc)[3] <- "share"
df_lc$landCover <- cwatm_modis[cwatm_modis$ID %in% lc, "Description"]
df_lc$time <- as.numeric(anno)
return(df_lc)
}))
}))
df_lc %>% head
df_lc$x %>% head
devtools::source_gist(id = "https://gist.github.com/dof1985/e889bf248b0a79e98f69035116e2d885")
bb
bb_israelCase
df_lc[df_lc$x %between% bb_israelCase[2:1] & df_lc$y %between% bb_israelCase[4:3], ] %>% nrow
df_lc <- df_lc[df_lc$year == 2001, ]
print(file)
file <- files[1]
print(file)
anno_inds <-regexec("A[0-2]+",file)
anno <- substr(file, anno_inds[[1]][1] + 1, anno_inds[[1]][1] + 4)
tmp_lc <- raster(file)
tmp_lc[] <- tmp_lc[] + 1
tmp <- do.call("rbind", lapply(files[1], function(file) {
print(file)
anno_inds <-regexec("A[0-2]+",file)
anno <- substr(file, anno_inds[[1]][1] + 1, anno_inds[[1]][1] + 4)
tmp_lc <- raster(file)
tmp_lc[] <- tmp_lc[] + 1
do.call("rbind", lapply(100:105, function(lc) {
print(lc)
modis_cat <- landCoverLegend[landCoverLegend$CWATM2 %in% lc, "Value"] + 1
if(length(modis_cat) == 0) modis_cat <- -10^6
tmp_lc[!tmp_lc[] %in% modis_cat]  <- 0
tmp_lc[tmp_lc[] %in% modis_cat]  <- 1
lc_agg <- aggregate(tmp_lc, fact = 2, fun = sum, na.rm = TRUE)
lc_agg[] <- lc_agg[] / 4
df_lc <- as.data.frame(rasterToPoints(lc_agg))
names(df_lc)[3] <- "share"
df_lc[df_lc$x %between% bb_israelCase[2:1] & df_lc$y %between% bb_israelCase[4:3], ] %>% nrow
df_lc$landCover <- cwatm_modis[cwatm_modis$ID %in% lc, "Description"]
df_lc$time <- as.numeric(anno)
return(df_lc)
}))
}))
tmp %>% head
tmp <- tmp[tmp$time %in% 2001, ]
tmp %>% tail
tmp <- tmp[tmp$landCover %in% "water", ]
tmp[tmp$x %between% bb_israelCase[2:1] & tmp$y %between% bb_israelCase[4:3], ] %>% nrow
tmp$x %between% bb_israelCase[2:1]
any(tmp$x %between% bb_israelCase[2:1])
any(tmp$y %between% bb_israelCase[4:3])
any(tmp$y %between% bb_israelCase[3:4])
tmp[tmp$x %between% bb_israelCase[2:1] & tmp$y %between% bb_israelCase[3:4], ] %>% nrow
tmp <- do.call("rbind", lapply(files[1], function(file) {
print(file)
anno_inds <-regexec("A[0-2]+",file)
anno <- substr(file, anno_inds[[1]][1] + 1, anno_inds[[1]][1] + 4)
tmp_lc <- raster(file)
tmp_lc[] <- tmp_lc[] + 1
do.call("rbind", lapply(100:105, function(lc) {
print(lc)
modis_cat <- landCoverLegend[landCoverLegend$CWATM2 %in% lc, "Value"] + 1
if(length(modis_cat) == 0) modis_cat <- -10^6
tmp_lc[!tmp_lc[] %in% modis_cat]  <- 0
tmp_lc[tmp_lc[] %in% modis_cat]  <- 1
lc_agg <- aggregate(tmp_lc, fact = 2, fun = sum, na.rm = TRUE)
lc_agg[] <- lc_agg[] / 4
df_lc <- as.data.frame(rasterToPoints(lc_agg))
names(df_lc)[3] <- "share"
df_lc <- df_lc[df_lc$x %between% bb_israelCase[2:1] & df_lc$y %between% bb_israelCase[3:4], ]
df_lc$landCover <- cwatm_modis[cwatm_modis$ID %in% lc, "Description"]
df_lc$time <- as.numeric(anno)
return(df_lc)
}))
}))
# HCID grid
library(raster)
library(gdalUtils)
library(ncdf4)
library(magrittr)
rm(list = ls())
devtools::source_gist(id = "https://gist.github.com/dof1985/e889bf248b0a79e98f69035116e2d885")
# extent xmax, xmin, ymax, ymin
bb_israelCase <- c(35.3, 34.62, 31.6, 32.26)
# Resample Rasters - yy.yy to xx.xx degrees
pth_files <- "D:/Dropbox/IIASA/cwatm-dataCollection/modis_lc"
files <- list.files(pth_files, full.names = TRUE, pattern = ".tif$")
### See and refer to comments in Excel file how to convert GLC to CWATM
### check how to build netcdf files in r -
### that contains 6 GEO2D data layers (fraction forest,.. grassland, irrigated land, paddy irrigated land, sealed land, and water)
### & 3 dimesnions == lat, lon, time
landCoverLegend <- openxlsx::read.xlsx(list.files(pth_files, full.names = TRUE, pattern = ".xlsx$"),
sheet = 1, rows = 1:17, cols = c(1:2, 4:5))
cwatm_modis <- openxlsx::read.xlsx(list.files(pth_files, full.names = TRUE, pattern = ".xlsx$"),
sheet = 1, rows = 1:7, cols = 8:10)
# create data frame with lan, lot, years and 6 vars:...
#file <- files[1]
tmp <- do.call("rbind", lapply(files, function(file) {
print(file)
anno_inds <-regexec("A[0-2]+",file)
anno <- substr(file, anno_inds[[1]][1] + 1, anno_inds[[1]][1] + 4)
tmp_lc <- raster(file)
tmp_lc[] <- tmp_lc[] + 1
do.call("rbind", lapply(100:105, function(lc) {
print(lc)
modis_cat <- landCoverLegend[landCoverLegend$CWATM2 %in% lc, "Value"] + 1
if(length(modis_cat) == 0) modis_cat <- -10^6
tmp_lc[!tmp_lc[] %in% modis_cat]  <- 0
tmp_lc[tmp_lc[] %in% modis_cat]  <- 1
lc_agg <- aggregate(tmp_lc, fact = 2, fun = sum, na.rm = TRUE)
lc_agg[] <- lc_agg[] / 4
df_lc <- as.data.frame(rasterToPoints(lc_agg))
names(df_lc)[3] <- "share"
df_lc <- df_lc[df_lc$x %between% bb_israelCase[2:1] & df_lc$y %between% bb_israelCase[3:4], ]
df_lc$landCover <- cwatm_modis[cwatm_modis$ID %in% lc, "Description"]
df_lc$time <- as.numeric(anno)
return(df_lc)
}))
}))
df_lc <- as.data.frame(tidyr::spread(tmp, landCover, share, fill = 0))
df_lc %>% head
df_lc[-1:-3] %>% colSums %>% `==`(1) %>% all
df_lc[-1:-3] %>% colSums %>% `!=`(1) %>% `[`(df_lc, ., )
df_lc[-1:-3] %>% colSums %>% `!=`(1) %>% `[`(df_lc, ., ) %>% head
df_lc[-1:-3] %>% rowSums %>% `!=`(1) %>% `[`(df_lc, ., )
# Resample Rasters - yy.yy to xx.xx degrees
pth_files <- "D:/Dropbox/IIASA/cwatm-dataCollection/routing"
list.files(pth_files)
# Resample Rasters - yy.yy to xx.xx degrees
pth_files1 <- "D:/Dropbox/IIASA/cwatm-dataCollection/routing/eu_dir_30s"
# Resample Rasters - yy.yy to xx.xx degrees
pth_files1 <- "D:/Dropbox/IIASA/cwatm-dataCollection/routing/eu_dir_30s"
# Resample Rasters - yy.yy to xx.xx degrees
pth_files <- c("D:/Dropbox/IIASA/cwatm-dataCollection/routing/eu_dir_30s", "D:/Dropbox/IIASA/cwatm-dataCollection/routing/eu_acc_30s")
files <- list.files(pth_files[1], full.names = TRUE, pattern = ".adf$")
files
# Resample Rasters - yy.yy to xx.xx degrees
pth_files <- c("D:/Dropbox/IIASA/cwatm-dataCollection/routing/")
theme <- "eu_dir_30s"
sprintf("%s%s/%s", pth_files, theme, theme)
# "eu_acc_30s"
files <- list.files(sprintf("%s%s/%s", pth_files, theme, theme), full.names = TRUE, pattern = ".adf$")
files
# "eu_acc_30s"
files <- list.files(sprintf("%s%s/%s", pth_files, theme, theme), full.names = TRUE, pattern = "001.adf$")
files
library(rgdal)
x <- new("GDALReadOnlyDataset", files)
getDriverLongName(getDriver(x))
xx<-asSGDF_GROD(x)
x <- new("GDALReadOnlyDataset", files)
r <- raster(asSGDF_GROD(x))
plot(r)
?extract
?crop
?etent
?extent
# extent xmax, xmin, ymax, ymin
bb_israelCase <- c(35.25, 34.52, 32.34, 31.44)
r <- crop(r, y = bb_israelCase[2, 1, 4, 3])
r <- crop(r, y = extent(bb_israelCase[2, 1, 4, 3]))
extent(bb_israelCase[2, 1, 4, 3])
bb_israelCase[2, 1, 4, 3]
r <- crop(r, y = extent(xmin = bb_israelCase[2],
xmax = bb_israelCase[1],
ymin = bb_israelCase[4],
ymax = bb_israelCase[3]))
extent(xmin = bb_israelCase[2],
xmax = bb_israelCase[1],
ymin = bb_israelCase[4],
ymax = bb_israelCase[3])
r <- crop(r, y = extent(matrix(bb_israelCase[2, 1, 4, 3], by.row = TRUE, nrow = 2))
)
extent(matrix(bb_israelCase[2, 1, 4, 3], by.row = TRUE, nrow = 2))
?matrix
r <- crop(r, y = extent(matrix(bb_israelCase[2, 1, 4, 3], byrow = TRUE, nrow = 2)))
extent(matrix(bb_israelCase[2, 1, 4, 3], byrow = TRUE, nrow = 2))
matrix(bb_israelCase[2, 1, 4, 3], byrow = TRUE, nrow = 2)
bb_israelCase[2, 1, 4, 3]
r <- crop(r, y = extent(matrix(bb_israelCase[c(2, 1, 4, 3)], byrow = TRUE, nrow = 2)))
plot(r)
setwd("D:/Dropbox/GitHub/cwatm4r/R")
