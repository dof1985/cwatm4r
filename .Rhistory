quantile = "mean"
at1km = TRUE
# ERROR HANDLING
#####
# CHECK ARGS: depth
if(!depth %in% c("0-5cm", "5-15cm", "15-30cm", "30-60cm", "60-100cm", "100-200cm")) {
stop(sprintf("`%s` is not a found in `%s`", depth,
paste0(c("0-5cm", "5-15cm", "15-30cm", "30-60cm", "60-100cm", "100-200cm"), collapse = ", ")))
}
# CHECK ARGS: variable
if(!variable %in% c("bdod", "cec", "cfvo", "clay", "nitrogen", "ocd", "ocd", "phh2o", "sand", "silt", "soc", "wrb")) {
stop(sprintf("`%s` is not a found in `%s`", variable,
paste0(c("bdod", "cec", "cfvo", "clay", "nitrogen", "ocd", "ocd", "phh2o", "sand", "silt", "soc", "wrb"), collapse = ", ")))
}
# CHECK ARGS: variable
if(!quantile %in%  c("mean", "Q0.05", "Q0.5", "Q0.95", "uncertainty")) {
stop(sprintf("`%s` is not a found in `%s`", quantile,
paste0( c("mean", "Q0.05", "Q0.5", "Q0.95", "uncertainty"), collapse = ", ")))
}
# ALERT IF BOUNDING BOX IS NOT DEFINED
if(is.null(b_box)) warning("No bounding box defined. Downloading a global layer may take a lot of time")
if(!is.null(b_box) && !class(b_box) %in% "Extent") stop("b_box expect and Extent object")
# DEFINE THE HOMOLOSINE PROJECTION
igh    <- '+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs'
# DEFINE THE WGS84 COORD. SYSTEM
wgs84  <- '+proj=longlat +datum=WGS84 +no_defs'
# DEFINE SOILGRIDS' URL
sg_url <- "/vsicurl/https://files.isric.org/soilgrids/latest/data/"
e <- as(b_box, "SpatialPolygons")
sp::proj4string(e) <- wgs84
e.homolosine <- sp::spTransform(e, igh)
bb     <- c(e.homolosine@bbox["x", "min"], # ulx
e.homolosine@bbox["y", "max"], # uly
e.homolosine@bbox["x", "max"], # lrx
e.homolosine@bbox["y", "min"]) # lry
# download virtual layer in bb
src <- sprintf("%s/%s_%s_%s.vrt", variable, variable, depth, quantile)
src
f1 <- paste0(tempfile(),".vrt")
args <- list("src_dataset" = src,
"dst_dataset" = f1,
"tr" = c(250, 250),
"projwin" = bb,
"projwin_srs" = igh,
"verbose" = TRUE)
do.call("f_list$gdal_translate", args)
# create temp env.
tmp_dir_path <- tempdir()
f_list <- list(
"gdal_translate"  = gdalUtils::gdal_translate,
"gdal_warp" = gdalUtils::gdalwarp
)
# download virtual layer in bb
src <- sprintf("%s/%s_%s_%s.vrt", variable, variable, depth, quantile)
f1 <- paste0(tempfile(),".vrt")
args <- list("src_dataset" = src,
"dst_dataset" = f1,
"tr" = c(250, 250),
"projwin" = bb,
"projwin_srs" = igh,
"verbose" = TRUE)
do.call("f_list$gdal_translate", args)
do.call(f_list$gdal_translate, args)
# download virtual layer in bb
src <- sprintf("%s%s/%s_%s_%s.vrt", sg_url, variable, variable, depth, quantile)
f1 <- paste0(tempfile(),".vrt")
args <- list("src_dataset" = src,
"dst_dataset" = f1,
"tr" = c(250, 250),
"projwin" = bb,
"projwin_srs" = igh,
"verbose" = TRUE)
do.call(f_list$gdal_translate, args)
# transfrom virtual layer from homolosine to wgs84 - separate from aggregation &/or define function to aggrrgation
f2 <- paste0(tempfile(),".vrt")
args <- list("src_dataset" = f1,
"dst_dataset" = f2,
"s_srs" = igh,
"t_srs" = wgs84,
"of" = "VRT")
if(at1km) {
args <- c(args, list("tr" = c(1000, 1000)))
} else {
warning("No aggregation. Output has a 250 meter resolution")
}
args
?gdalwarp
args <- list("src_dataset" = f1,
"dst_dataset" = f2,
"s_srs" = igh,
"t_srs" = wgs84,
"of" = "VRT")
if(at1km) {
args <- c(args, list("tr" = c(1000, 1000),
"r" = "average"))
} else {
warning("No aggregation. Output has a 250 meter resolution")
}
do.call(f_list$gdal_warp, args)
f2
args <- list("src_dataset" = f2,
"dst_dataset" = sprintf("%s/namefile.tif", path_out),
"co" = c("TILED=YES","COMPRESS=DEFLATE","PREDICTOR=2","BIGTIFF=YES"))
do.call(f_list$gdal_translate, args)
args <- list("src_dataset" = f2,
"dst_dataset" = sprintf("%s/namefile.tif", out_path),
"co" = c("TILED=YES","COMPRESS=DEFLATE","PREDICTOR=2","BIGTIFF=YES"))
do.call(f_list$gdal_translate, args)
path_out
out_path
list.files("d:/dropbox/iiasa")
list.files("d:/dropbox/iiasa/cwatm-datacollection")
list.files("d:/dropbox/iiasa/cwatm-datacollection/dem_merit")
dem <- raster::raster("d:/dropbox/iiasa/cwatm-datacollection/dem_merit/Israel_DEM.tif")
plot(dem)
dem
dem@extent/ncols
res(dem)
resolution(dem)
dem@z
dem@extent/data@ncols
dem@extent/data@ncol
dem@extent/dem@ncols
res(dem)
raster::res(dem)
dem<- "d:/dropbox/iiasa/cwatm-datacollection/dem_merit/Israel_DEM.tif"
to_res = 30/3600
dem
f1 <- tempfile()
to_res = 30/3600
args <- list("srcfile" = dem,
"dstfile" = f1,
"tr" = c(to_res, to_res),
"r" = "average",
"output_Raster" = TRUE
)
f_list <- list("gdalwarp" = gdalUtils::gdalwarp)
mean_dem <- do.call(f_list$gdalwarp, args)
mean_dem
plot(mean_dem)
library(raster)
plot(mean_dem)
plot(raster(dem))
raster::raster(dem) - mean_dem
orig_dem <- raster::raster(dem)
raster:res(orig_dem)
raster::res(orig_dem)
args <- list("srcfile" = dem,
"dstfile" = f1,
"tr" = raster::res(orig_dem),
"r" = "average",
"output_Raster" = TRUE
)
args <- list("srcfile" = dem,
"dstfile" = f1,
"tr" = raster::res(orig_dem),
"r" = "max",
"output_Raster" = TRUE
)
mean_dem_hr <- do.call(f_list$gdalwarp, args)
args <- list("srcfile" = dem,
"dstfile" = f1,
"tr" = raster::res(orig_dem),
"r" = "max",
"output_Raster" = TRUE,
"overwrite" = TRUE
)
mean_dem_hr <- do.call(f_list$gdalwarp, args)
mean_dem_hr
mean_dem_hr %>% plot
plot)mean_dem_hr
plot(mean_dem_hr)
squared_deviations <- (orig_dem - mean_dem_hr) ^ 2
plot(squared_deviations)
hist(getValue(squared_deviations))
hist(getValues(squared_deviations))
summary(getValues(squared_deviations))
rm(list = ls())
dem <- "d:/dropbox/iiasa/cwatm-datacollection/dem_merit/Israel_DEM.tif"
to_res = 30/3600
f_list <- list("gdalwarp" = gdalUtils::gdalwarp)
f1 <- tempfile()
orig_dem <- raster::raster(dem)
args <- list("srcfile" = dem,
"dstfile" = f1,
"tr" = c(to_res, to_res),
"r" = "average",
"output_Raster" = TRUE
)
mean_dem <- do.call(f_list$gdalwarp, args)
f2 <- tempfile()
args <- list("srcfile" = f1,
"dstfile" = f2,
"tr" = raster::res(orig_dem),
"r" = "max",
"output_Raster" = TRUE,
"overwrite" = TRUE
)
mean_dem_hr <- do.call(f_list$gdalwarp, args)
squared_deviations <- (orig_dem - mean_dem_hr) ^ 2
squared_deviations
plot(squared_deviations)
f3 <- tempfile()
f2
?writeRaster
rm("squared_deviations")
raster::writeRaster((orig_dem - mean_dem_hr) ^ 2,
filename = f2,
format = "GTiff")
f3 <- tempfile()
args <- list("srcfile" = f2,
"dstfile" = f3,
"tr" = c(to_res, to_res),
"r" = "average",
"output_Raster" = TRUE,
"overwrite" = TRUE
)
std_dem <- do.call(f_list$gdalwarp, args)
plot(std_dem)
plot(mean_dem)
args <- list("srcfile" = f2,
"dstfile" = f3,
"tr" = c(to_res, to_res),
"r" = "average",
"output_Raster" = TRUE,
"overwrite" = TRUE
)
f_list <- list("gdalwarp" = gdalUtils::gdalwarp)
f1 <- tempfile()
orig_dem <- raster::raster(dem)
args <- list("srcfile" = dem,
"dstfile" = f1,
"tr" = c(to_res, to_res),
"r" = "average",
"output_Raster" = TRUE
)
mean_dem <- do.call(f_list$gdalwarp, args)
f2 <- tempfile()
args <- list("srcfile" = f1,
"dstfile" = f2,
"tr" = raster::res(orig_dem),
"r" = "max",
"output_Raster" = TRUE,
"overwrite" = TRUE
)
mean_dem_hr <- do.call(f_list$gdalwarp, args)
raster::writeRaster((orig_dem - mean_dem_hr) ^ 2,
filename = f2,
format = "GTiff")
f3 <- tempfile()
args <- list("srcfile" = f2,
"dstfile" = f3,
"tr" = c(to_res, to_res),
"r" = "average",
"output_Raster" = TRUE,
"overwrite" = TRUE
)
std_dem <- do.call(f_list$gdalwarp, args)
plot(mean_dem)
plot(std_dem)
std_dem
summary(std_dem)
f3 <- tempfile()
raster::writeRaster((orig_dem - mean_dem_hr) ^ 2,
filename = f3,
format = "GTiff")
f4 <- tempfile()
args <- list("srcfile" = f3,
"dstfile" = f4,
"tr" = c(to_res, to_res),
"r" = "average",
"output_Raster" = TRUE,
"overwrite" = TRUE
)
std_dem <- do.call(f_list$gdalwarp, args)
f3
raster::raster(f3)
f3 <- sprintf("%stmpraster.tif", tempfile() )
f3
f3 <- sprintf("%s.tif", tempfile() )
f3
raster::writeRaster((orig_dem - raster::raster(f2)) ^ 2,
filename = f3,
format = "GTiff")
f4 <- tempfile()
args <- list("srcfile" = f3,
"dstfile" = f4,
"tr" = c(to_res, to_res),
"r" = "average",
"output_Raster" = TRUE,
"overwrite" = TRUE
)
std_dem <- do.call(f_list$gdalwarp, args)
plot(std_dem)
summary(std_dem)
f3
raster::raster( f3)
raster::raster( f3) ->r
dim(r)
12000^2
sum(getValues(r), na.rm = TRUE) / 12000^2
std_dem <- std_dem ^ 0.5
plot(std_dem)
std_dem
mean_dem
c(mean_dem, std_dem
c(mean_dem, std_dem)
brick(mean_dem, std_dem)/
brick(mean_dem, std_dem)
stack(mean_dem, std_dem)
names(stack(mean_dem, std_dem))
names(stack("dem" = mean_dem, "elev_std" = std_dem))
setNames(stack(mean_dem, std_dem) nm = c("elev", "elevStd"))
setNames(stack(mean_dem, std_dem), nm = c("elev", "elevStd"))
names(setNames(stack(mean_dem, std_dem), nm = c("elev", "elevStd")))
setNames(stack(mean_dem, std_dem), nm = c("elev", "elevStd"))$elev
summary(setNames(stack(mean_dem, std_dem), nm = c("elev", "elevStd"))$elev)
createElvStd <- function(dem, to_res = 30/3600) {
f_list <- list("gdalwarp" = gdalUtils::gdalwarp)
f1 <- tempfile()
orig_dem <- raster::raster(dem)
args <- list("srcfile" = dem,
"dstfile" = f1,
"tr" = c(to_res, to_res),
"r" = "average",
"output_Raster" = TRUE
)
mean_dem <- do.call(f_list$gdalwarp, args)
f2 <- tempfile()
args <- list("srcfile" = f1,
"dstfile" = f2,
"tr" = raster::res(orig_dem),
"r" = "max",
"output_Raster" = TRUE,
"overwrite" = FALSE
)
do.call(f_list$gdalwarp, args)
f3 <- sprintf("%s.tif", tempfile() )
raster::writeRaster((orig_dem - raster::raster(f2)) ^ 2,
filename = f3,
format = "GTiff")
f4 <- tempfile()
args <- list("srcfile" = f3,
"dstfile" = f4,
"tr" = c(to_res, to_res),
"r" = "average",
"output_Raster" = TRUE,
"overwrite" = TRUE
)
std_dem <- do.call(f_list$gdalwarp, args)
std_dem <- std_dem ^ 0.5
return(setNames(stack(mean_dem, std_dem), nm = c("elev", "elevStd")))
}
setNames(stack(mean_dem, std_dem), nm = c("elev", "elevStd")
)
outElev <- setNames(stack(mean_dem, std_dem), nm = c("elev", "elevStd"))
dem <- "d:/dropbox/iiasa/cwatm-datacollection/dem_merit/Israel_DEM.tif"
install.packages("ilyamaclean/ecohydrotools")
ecohydrotools::flowdir
ilyamaclean/ecohydrotools::flowdir
install.packages("ecohydrotools")
install.github("ilyamaclean/ecohydrotools")
devtools::install.github("ilyamaclean/ecohydrotools")
devtools::install_github("ilyamaclean/ecohydrotools")
install.packages("rdwplus")
dem
getwd()
rdwplus::fill_sinks(dem = dem,
out = "d:/dropbox/iiasa/cwatm-datacollection/dem_merit/Israel_DEM_fillSink.tif",
size = 1
)
install.packages("rgrass7")
rdwplus::fill_sinks(dem = dem,
out = "d:/dropbox/iiasa/cwatm-datacollection/dem_merit/Israel_DEM_fillSink.tif",
size = 1)
riverNetwork_pyflwdir <- function(dem, to_res = 30/3600) {
rdwplus::fill_sinks(dem = dem,
out = "d:/dropbox/iiasa/cwatm-datacollection/dem_merit/Israel_DEM_fillSink.tif",
size = 1)
}
rdwplus::fill_sinks(dem = dem,
out = "d:/dropbox/iiasa/cwatm-datacollection/dem_merit/Israel_DEM_fillSink.tif",
size = 1)
sysytem("py print `Hello`")
system("py print `Hello`")
system("py print `Hello`", intern = TRUE)
system("python print `Hello`", intern = TRUE)
system("python print(`Hello`)", intern = TRUE)
?system
system(command = "python print(`Hello`)", intern = TRUE)
system(command = `python print("Hello")`, intern = TRUE)
system(command = 'python print("Hello")', intern = TRUE)
system(command = "py test.py", intern = TRUE)
system(command = "py c:\users\Dori7\test.py", intern = TRUE)
system(command = "py c:\\users\\Dori7\\test.py", intern = TRUE)
f1 <- tempfile()
f1 <- sprintf(tempfile(), ".py")
writeLines(c("print('Hello World')"), f1)
system(command = sprintf("py %s", f1), intern = TRUE)
writeLines(c("print('Hello World')",
"print('R2Python interface')"), f1)
system(command = sprintf("py %s", f1), intern = TRUE)
sprintf("import %s",c("rasterio", "pyflwdir"))
dependencies <- c("rasterio", "pyflwdir")
flwdir_d8 <- "d:/dropbox/iiasa/cwatm-datacollection/dem_merit/GRASS7_IsraelFlowdir_D8.tif"
plot(raster(flwdir_d8))
flwdir_d8 <- "d:/dropbox/iiasa/cwatm-datacollection/dem_merit/GRASS7_IsraelFlowdir_D8.tif"
elev_hr <- "d:/dropbox/iiasa/cwatm-datacollection/dem_merit/Israel_DEM.tif"
pyLines <- c(sprintf("import %s", dependencies),
sprintf("with rasterio.open('%s', 'r') as src:", flwdir_d8),
"flwdir = src.read(1)",
sprintf("with rasterio.open('%s', 'r') as src:", elev_hr),
"flwdir = src.read(1)",
)
pyLines
pyLines <- c(sprintf("import %s", dependencies),
sprintf("with rasterio.open('%s', 'r') as src:", flwdir_d8),
"flwdir = src.read(1)",
sprintf("with rasterio.open('%s', 'r') as src:", elev_hr),
"flwdir = src.read(1)"
)
pyLines <- c(sprintf("import %s", dependencies),
sprintf("with rasterio.open('%s', 'r') as src:", flwdir_d8),
"flwdir = src.read(1)",
sprintf("with rasterio.open('%s', 'r') as src:", elev_hr),
"flwdir = src.read(1)"
)
sprintf("with rasterio.open('%s', 'r') as src:", elev_hr)
pyLines
pyLines <- c(sprintf("import %s", dependencies),
sprintf("with rasterio.open('%s', 'r') as src:", flwdir_d8),
"  flwdir = src.read(1)",
sprintf("with rasterio.open('%s', 'r') as src:", elev_hr),
"  elevtn = src.read(1)",
"  prof = src.profile"
)
pyLines <- c(sprintf("import %s", dependencies),
sprintf("with rasterio.open('%s', 'r') as src:", flwdir_d8),
"  flwdir = src.read(1)",
sprintf("with rasterio.open('%s', 'r') as src:", elev_hr),
"  elevtn = src.read(1)",
"  prof = src.profile",
"flw = pyflwdir.from_array(flwdir, ftype='d8', cache=True)",
"print(flw)"
)
writeLines(pyLines, f1)
system(command = sprintf("py %s", f1), intern = TRUE)
pyLines <- c(sprintf("import %s", dependencies),
sprintf("with rasterio.open('%s', 'r') as src:", flwdir_d8),
"  flwdir = src.read(1)",
sprintf("with rasterio.open('%s', 'r') as src:", elev_hr),
"  elevtn = src.read(1)",
"  prof = src.profile",
"flw = pyflwdir.from_array(flwdir, ftype='d8', cache=True)",
"print(flw)"
)
pyLines
pyLines <- c(sprintf("import %s", dependencies),
sprintf("with rasterio.open('%s', 'r') as src:", flwdir_d8),
"  flwdir = src.read(1)",
sprintf("with rasterio.open('%s', 'r') as src:", elev_hr),
"  elevtn = src.read(1)",
"  prof = src.profile",
"flw = pyflwdir.from_array(flwdir, ftype='d8', cache=True)",
"print(flw)"
)
writeLines(pyLines, f1)
system(command = sprintf("py %s", f1), intern = TRUE)
flwdir_d8 <- "d:/dropbox/iiasa/cwatm-datacollection/dem_merit/GRASS7_IsraelFlowdir_D8.tif"
elev_hr <- "d:/dropbox/iiasa/cwatm-datacollection/dem_merit/Israel_DEM.tif"
f1 <- sprintf(tempfile(), ".py")
dependencies <- c("rasterio", "pyflwdir")
pyLines <- c(sprintf("import %s", dependencies),
sprintf("with rasterio.open('%s', 'r') as src:", flwdir_d8),
"  flwdir = src.read(1)",
"  transform = src.transform",
"  latlon = src.crs.to_epsg() == 4326",
sprintf("with rasterio.open('%s', 'r') as src:", elev_hr),
"  elevtn = src.read(1)",
"  prof = src.profile",
"flw = pyflwdir.from_array(flwdir, ftype='d8', transform=transform, latlon=latlon, cache=True)",
"print(flw)"
)
writeLines(pyLines, f1)
system(command = sprintf("py %s", f1), intern = TRUE)
pyLines <- c(sprintf("import %s", dependencies),
sprintf("with rasterio.open('%s', 'r') as src:", flwdir_d8),
"  flwdir = src.read(1)",
sprintf("with rasterio.open('%s', 'r') as src:", elev_hr),
"  elevtn = src.read(1)",
"  prof = src.profile",
"flw = pyflwdir.from_array(flwdir, ftype='d8', latlon=True, cache=True)",
"print(flw)"
)
writeLines(pyLines, f1)
system(command = sprintf("py %s", f1), intern = TRUE)
raster(flwdir_d8) %>% getValues %>% unique
library(magrittr)
raster(flwdir_d8) %>% getValues %>% unique
flwdir_ldd <- "d:/dropbox/iiasa/cwatm-datacollection/dem_merit/GRASS7_IsraelFlowdir_ldd.tif"
dependencies <- c("rasterio", "pyflwdir")
pyLines <- c(sprintf("import %s", dependencies),
sprintf("with rasterio.open('%s', 'r') as src:", flwdir_d8),
"  flwdir = src.read(1)",
sprintf("with rasterio.open('%s', 'r') as src:", elev_hr),
"  elevtn = src.read(1)",
"  prof = src.profile",
"flw = pyflwdir.from_array(flwdir, ftype='ldd', latlon=True, cache=True)",
"print(flw)"
)
writeLines(pyLines, f1)
system(command = sprintf("py %s", f1), intern = TRUE)
