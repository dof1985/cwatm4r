if (timeExists && length(time) > 1) iter <- seq_len(dim(arr)[3])
outr <- setNames(lapply(iter, function(l) {
if (timeExists && length(time) > 1) {
arr2rast <- arr[ , , l]
} else {
arr2rast <- arr[ , ]
}
if(transpose) arr2rast <- raster::t(arr2rast)
resx <- x[2] - x[1]
resy <- abs(y[2] - y[1])
# coords
xmn = min(x) - 0.5 * resx
xmx = max(x) + 0.5 * resx
ymn = min(y) - 0.5 * resy
ymx = max(y) + 0.5 * resy
if(isMask) {
xmn = x[s_x] - 0.5 * resx
xmx = x[e_x] + 0.5 * resx
ymn = y[e_y] - 0.5 * resy
ymx = y[s_y]  + 0.5 * resy
mask2array <- as.matrix(raster::crop(spatial, raster::extent(xmn, xmx, ymn, ymx)))
arr2rast <- mask2array * arr2rast
}
rast <- raster::raster(arr2rast, xmn = xmn, xmx = xmx, ymn = ymn, ymx = ymx, crs = raster::crs(crs))
if(!is.null(flip)) rast <- raster::flip(rast, direction = flip)
return(rast)
}), nm = tempnm)
if(length(outr) == 1) outr <- outr[[1]]
ncdf4::nc_close(tmp)
return(outr)
}
msk <- ncdf2raster(pth = mskpth, transpose = TRUE, spatial = NULL)
tst <- ncdf2raster(pth = pth1, transpose = TRUE, time = 1)
tst2 <- ncdf2raster(pth = pth1, transpose = TRUE, time = 1, spatial = msk)
plot(Tst)
plot(tst)
plot(tst2)
pthcellarea <- "c:/Users/fridman/Dropbox/IIASA/cwatm_Israel/outputs/ayalon_wastewater2_s2/cellArea_totalend.nc"
areacell <- ncdf2raster(pth = pthcellarea, transpose = TRUE, spatial = NULL)
areacell
plot(areacell)
tst3 <- ncdf2raster(pth = pth1, transpose = TRUE, time = 1:10, spatial = arecell)
tst3 <- ncdf2raster(pth = pth1, transpose = TRUE, time = 1:10, spatial = areacell)
tst3 <- ncdf2raster(pth = pth1, transpose = TRUE, time = 1:4, spatial = areacell)
tst3 <- ncdf2raster(pth = pth1, transpose = TRUE, time = 1, spatial = areacell)
plot(tst3)
tst3 <- ncdf2raster(pth = pth1, transpose = TRUE, time = c(1, 5), spatial = areacell)
plot(tst3)
plot(tst3$`36528`)
tst3 <- ncdf2raster(pth = pth1, transpose = TRUE, spatial = areacell)
length(tst3)
stack(tst3)
raster::animate(stack(tst3), pause = 0.05)
timeExists
ncdf2raster <- function(pth, flip = NULL, transpose = FALSE, time = NULL, spatial = NULL,
varName = NULL, fun = NULL, stat = NULL, crs = "+init=EPSG:4326", ...) {
# open file
tmp <- ncdf4::nc_open(pth)
# get dim x, dim y
y <- tmp$dim$lat$vals
x <- tmp$dim$lon$vals
# set temporal dim
timeExists <- "time" %in% names(tmp$dim)
tempnm <- NULL
if(timeExists && is.null(time)) {
temp <- tmp$dim$time
s_time <- temp[1]
e_time <- length(temp)
tempnm <- temp
}
if(!is.null(time)) {
stopifnot(timeExists)
temp <- tmp$dim$time
s_time <- time[1]
e_time <- s_time
if(length(time) == 2) e_time <- time[2] - s_time + 1
tempnm <- temp$vals[s_time:e_time]
}
s_x <- 1
c_x <- -1
s_y <- 1
c_y <- -1
# set spatial mask
spatExists <- !is.null(spatial)
isPts <- FALSE
isMask <- FALSE
if(spatExists) {
isPts <- class(spatial) %in% "data.frame"
isMask <- class(spatial) %in% "RasterLayer"
}
# pts
# msk
if(isMask) {
mask2array <- as.matrix(spatial)
mask2Extent <- raster::extentFromCells(spatial, raster::Which(!is.na(spatial), cell = TRUE))
s_x <- which.min(abs(mask2Extent@xmin - x))
e_x <- which.min(abs(mask2Extent@xmax - x))
s_y <- which.min(abs(mask2Extent@ymax - y))
e_y <- which.min(abs(mask2Extent@ymin - y))
c_x <- e_x - s_x + 1
c_y <- e_y - s_y + 1
#arrTmp <- ncdf4::ncvar_get(tmp, varid = varid, start = c(), count = counts)
}
varid <- names(tmp$var)[1]
if(!is.null(varName)) varid <- varName
from <- c(s_x, s_y)
counts <- c(c_x, c_y)
if(timeExists) {
from <- c(from, s_time)
counts <- c(counts, e_time)
}
arr <- ncdf4::ncvar_get(tmp, varid = varid, start = from, count = counts)
iter <- 1
if (timeExists && length(time) > 1) iter <- seq_len(dim(arr)[3])
outr <- setNames(lapply(iter, function(l) {
if (timeExists && length(time) > 1) {
arr2rast <- arr[ , , l]
} else {
arr2rast <- arr[ , ]
}
if(transpose) arr2rast <- raster::t(arr2rast)
resx <- x[2] - x[1]
resy <- abs(y[2] - y[1])
# coords
xmn = min(x) - 0.5 * resx
xmx = max(x) + 0.5 * resx
ymn = min(y) - 0.5 * resy
ymx = max(y) + 0.5 * resy
if(isMask) {
xmn = x[s_x] - 0.5 * resx
xmx = x[e_x] + 0.5 * resx
ymn = y[e_y] - 0.5 * resy
ymx = y[s_y]  + 0.5 * resy
mask2array <- as.matrix(raster::crop(spatial, raster::extent(xmn, xmx, ymn, ymx)))
arr2rast <- mask2array * arr2rast
}
rast <- raster::raster(arr2rast, xmn = xmn, xmx = xmx, ymn = ymn, ymx = ymx, crs = raster::crs(crs))
if(!is.null(flip)) rast <- raster::flip(rast, direction = flip)
return(rast)
}), nm = tempnm)
if(length(outr) == 1) outr <- outr[[1]]
ncdf4::nc_close(tmp)
return(outr)
}
tst3 <- ncdf2raster(pth = pth1, transpose = TRUE, spatial = areacell)
pth = pth1; transpose = TRUE; spatial = areacell
# open file
tmp <- ncdf4::nc_open(pth)
# get dim x, dim y
y <- tmp$dim$lat$vals
x <- tmp$dim$lon$vals
# set temporal dim
timeExists <- "time" %in% names(tmp$dim)
tempnm <- NULL
timeExists
timeExists && is.null(time)
time
time <- NULL
temp <- tmp$dim$time
temp
s_time <- temp[1]
e_time <- length(temp)
e_time
ncdf2raster <- function(pth, flip = NULL, transpose = FALSE, time = NULL, spatial = NULL,
varName = NULL, fun = NULL, stat = NULL, crs = "+init=EPSG:4326", ...) {
# open file
tmp <- ncdf4::nc_open(pth)
# get dim x, dim y
y <- tmp$dim$lat$vals
x <- tmp$dim$lon$vals
# set temporal dim
timeExists <- "time" %in% names(tmp$dim)
tempnm <- NULL
if(timeExists && is.null(time)) {
temp <- tmp$dim$time$vals
s_time <- temp[1]
e_time <- length(temp)
tempnm <- temp
}
if(!is.null(time)) {
stopifnot(timeExists)
temp <- tmp$dim$time
s_time <- time[1]
e_time <- s_time
if(length(time) == 2) e_time <- time[2] - s_time + 1
tempnm <- temp$vals[s_time:e_time]
}
s_x <- 1
c_x <- -1
s_y <- 1
c_y <- -1
# set spatial mask
spatExists <- !is.null(spatial)
isPts <- FALSE
isMask <- FALSE
if(spatExists) {
isPts <- class(spatial) %in% "data.frame"
isMask <- class(spatial) %in% "RasterLayer"
}
# pts
# msk
if(isMask) {
mask2array <- as.matrix(spatial)
mask2Extent <- raster::extentFromCells(spatial, raster::Which(!is.na(spatial), cell = TRUE))
s_x <- which.min(abs(mask2Extent@xmin - x))
e_x <- which.min(abs(mask2Extent@xmax - x))
s_y <- which.min(abs(mask2Extent@ymax - y))
e_y <- which.min(abs(mask2Extent@ymin - y))
c_x <- e_x - s_x + 1
c_y <- e_y - s_y + 1
#arrTmp <- ncdf4::ncvar_get(tmp, varid = varid, start = c(), count = counts)
}
varid <- names(tmp$var)[1]
if(!is.null(varName)) varid <- varName
from <- c(s_x, s_y)
counts <- c(c_x, c_y)
if(timeExists) {
from <- c(from, s_time)
counts <- c(counts, e_time)
}
arr <- ncdf4::ncvar_get(tmp, varid = varid, start = from, count = counts)
iter <- 1
if (timeExists && length(time) > 1) iter <- seq_len(dim(arr)[3])
outr <- setNames(lapply(iter, function(l) {
if (timeExists && length(time) > 1) {
arr2rast <- arr[ , , l]
} else {
arr2rast <- arr[ , ]
}
if(transpose) arr2rast <- raster::t(arr2rast)
resx <- x[2] - x[1]
resy <- abs(y[2] - y[1])
# coords
xmn = min(x) - 0.5 * resx
xmx = max(x) + 0.5 * resx
ymn = min(y) - 0.5 * resy
ymx = max(y) + 0.5 * resy
if(isMask) {
xmn = x[s_x] - 0.5 * resx
xmx = x[e_x] + 0.5 * resx
ymn = y[e_y] - 0.5 * resy
ymx = y[s_y]  + 0.5 * resy
mask2array <- as.matrix(raster::crop(spatial, raster::extent(xmn, xmx, ymn, ymx)))
arr2rast <- mask2array * arr2rast
}
rast <- raster::raster(arr2rast, xmn = xmn, xmx = xmx, ymn = ymn, ymx = ymx, crs = raster::crs(crs))
if(!is.null(flip)) rast <- raster::flip(rast, direction = flip)
return(rast)
}), nm = tempnm)
if(length(outr) == 1) outr <- outr[[1]]
ncdf4::nc_close(tmp)
return(outr)
}
tst3 <- ncdf2raster(pth = pth1, transpose = TRUE, spatial = areacell)
ncdf2raster <- function(pth, flip = NULL, transpose = FALSE, time = NULL, spatial = NULL,
varName = NULL, fun = NULL, stat = NULL, crs = "+init=EPSG:4326", ...) {
# open file
tmp <- ncdf4::nc_open(pth)
# get dim x, dim y
y <- tmp$dim$lat$vals
x <- tmp$dim$lon$vals
# set temporal dim
timeExists <- "time" %in% names(tmp$dim)
tempnm <- NULL
if(timeExists && is.null(time)) {
temp <- tmp$dim$time$vals
s_time <- 1
e_time <- length(temp)
tempnm <- temp
}
if(!is.null(time)) {
stopifnot(timeExists)
temp <- tmp$dim$time
s_time <- time[1]
e_time <- s_time
if(length(time) == 2) e_time <- time[2] - s_time + 1
tempnm <- temp$vals[s_time:e_time]
}
s_x <- 1
c_x <- -1
s_y <- 1
c_y <- -1
# set spatial mask
spatExists <- !is.null(spatial)
isPts <- FALSE
isMask <- FALSE
if(spatExists) {
isPts <- class(spatial) %in% "data.frame"
isMask <- class(spatial) %in% "RasterLayer"
}
# pts
# msk
if(isMask) {
mask2array <- as.matrix(spatial)
mask2Extent <- raster::extentFromCells(spatial, raster::Which(!is.na(spatial), cell = TRUE))
s_x <- which.min(abs(mask2Extent@xmin - x))
e_x <- which.min(abs(mask2Extent@xmax - x))
s_y <- which.min(abs(mask2Extent@ymax - y))
e_y <- which.min(abs(mask2Extent@ymin - y))
c_x <- e_x - s_x + 1
c_y <- e_y - s_y + 1
#arrTmp <- ncdf4::ncvar_get(tmp, varid = varid, start = c(), count = counts)
}
varid <- names(tmp$var)[1]
if(!is.null(varName)) varid <- varName
from <- c(s_x, s_y)
counts <- c(c_x, c_y)
if(timeExists) {
from <- c(from, s_time)
counts <- c(counts, e_time)
}
arr <- ncdf4::ncvar_get(tmp, varid = varid, start = from, count = counts)
iter <- 1
if (timeExists && length(time) > 1) iter <- seq_len(dim(arr)[3])
outr <- setNames(lapply(iter, function(l) {
if (timeExists && length(time) > 1) {
arr2rast <- arr[ , , l]
} else {
arr2rast <- arr[ , ]
}
if(transpose) arr2rast <- raster::t(arr2rast)
resx <- x[2] - x[1]
resy <- abs(y[2] - y[1])
# coords
xmn = min(x) - 0.5 * resx
xmx = max(x) + 0.5 * resx
ymn = min(y) - 0.5 * resy
ymx = max(y) + 0.5 * resy
if(isMask) {
xmn = x[s_x] - 0.5 * resx
xmx = x[e_x] + 0.5 * resx
ymn = y[e_y] - 0.5 * resy
ymx = y[s_y]  + 0.5 * resy
mask2array <- as.matrix(raster::crop(spatial, raster::extent(xmn, xmx, ymn, ymx)))
arr2rast <- mask2array * arr2rast
}
rast <- raster::raster(arr2rast, xmn = xmn, xmx = xmx, ymn = ymn, ymx = ymx, crs = raster::crs(crs))
if(!is.null(flip)) rast <- raster::flip(rast, direction = flip)
return(rast)
}), nm = tempnm)
if(length(outr) == 1) outr <- outr[[1]]
ncdf4::nc_close(tmp)
return(outr)
}
msk <- ncdf2raster(pth = mskpth, transpose = TRUE, spatial = NULL)''
areacell <- ncdf2raster(pth = pthcellarea, transpose = TRUE, spatial = NULL)
tst <- ncdf2raster(pth = pth1, transpose = TRUE, time = 1)
tst2 <- ncdf2raster(pth = pth1, transpose = TRUE, time = 1, spatial = msk)
tst3 <- ncdf2raster(pth = pth1, transpose = TRUE, spatial = areacell)
arr
spatial
TIME
time
# open file
tmp <- ncdf4::nc_open(pth)
# get dim x, dim y
y <- tmp$dim$lat$vals
x <- tmp$dim$lon$vals
# set temporal dim
timeExists <- "time" %in% names(tmp$dim)
tempnm <- NULL
if(timeExists && is.null(time)) {
temp <- tmp$dim$time$vals
s_time <- 1
e_time <- length(temp)
tempnm <- temp
}
if(!is.null(time)) {
stopifnot(timeExists)
temp <- tmp$dim$time
s_time <- time[1]
e_time <- s_time
if(length(time) == 2) e_time <- time[2] - s_time + 1
tempnm <- temp$vals[s_time:e_time]
}
s_x <- 1
c_x <- -1
s_y <- 1
c_y <- -1
# set spatial mask
spatExists <- !is.null(spatial)
isPts <- FALSE
isMask <- FALSE
if(spatExists) {
isPts <- class(spatial) %in% "data.frame"
isMask <- class(spatial) %in% "RasterLayer"
}
# msk
if(isMask) {
mask2array <- as.matrix(spatial)
mask2Extent <- raster::extentFromCells(spatial, raster::Which(!is.na(spatial), cell = TRUE))
s_x <- which.min(abs(mask2Extent@xmin - x))
e_x <- which.min(abs(mask2Extent@xmax - x))
s_y <- which.min(abs(mask2Extent@ymax - y))
e_y <- which.min(abs(mask2Extent@ymin - y))
c_x <- e_x - s_x + 1
c_y <- e_y - s_y + 1
#arrTmp <- ncdf4::ncvar_get(tmp, varid = varid, start = c(), count = counts)
}
varid <- names(tmp$var)[1]
if(!is.null(varName)) varid <- varName
from <- c(s_x, s_y)
counts <- c(c_x, c_y)
if(timeExists) {
from <- c(from, s_time)
counts <- c(counts, e_time)
}
from
counts
arr <- ncdf4::ncvar_get(tmp, varid = varid, start = from, count = counts)
arr
dim(arr)
iter <- 1
length(dim(arr)) == 3
ncdf2raster <- function(pth, flip = NULL, transpose = FALSE, time = NULL, spatial = NULL,
varName = NULL, fun = NULL, stat = NULL, crs = "+init=EPSG:4326", ...) {
# open file
tmp <- ncdf4::nc_open(pth)
# get dim x, dim y
y <- tmp$dim$lat$vals
x <- tmp$dim$lon$vals
# set temporal dim
timeExists <- "time" %in% names(tmp$dim)
tempnm <- NULL
if(timeExists && is.null(time)) {
temp <- tmp$dim$time$vals
s_time <- 1
e_time <- length(temp)
tempnm <- temp
}
if(!is.null(time)) {
stopifnot(timeExists)
temp <- tmp$dim$time
s_time <- time[1]
e_time <- s_time
if(length(time) == 2) e_time <- time[2] - s_time + 1
tempnm <- temp$vals[s_time:e_time]
}
s_x <- 1
c_x <- -1
s_y <- 1
c_y <- -1
# set spatial mask
spatExists <- !is.null(spatial)
isPts <- FALSE
isMask <- FALSE
if(spatExists) {
isPts <- class(spatial) %in% "data.frame"
isMask <- class(spatial) %in% "RasterLayer"
}
# pts
# msk
if(isMask) {
mask2array <- as.matrix(spatial)
mask2Extent <- raster::extentFromCells(spatial, raster::Which(!is.na(spatial), cell = TRUE))
s_x <- which.min(abs(mask2Extent@xmin - x))
e_x <- which.min(abs(mask2Extent@xmax - x))
s_y <- which.min(abs(mask2Extent@ymax - y))
e_y <- which.min(abs(mask2Extent@ymin - y))
c_x <- e_x - s_x + 1
c_y <- e_y - s_y + 1
#arrTmp <- ncdf4::ncvar_get(tmp, varid = varid, start = c(), count = counts)
}
varid <- names(tmp$var)[1]
if(!is.null(varName)) varid <- varName
from <- c(s_x, s_y)
counts <- c(c_x, c_y)
if(timeExists) {
from <- c(from, s_time)
counts <- c(counts, e_time)
}
arr <- ncdf4::ncvar_get(tmp, varid = varid, start = from, count = counts)
iter <- 1
if(length(dim(arr)) == 3) iter <- seq_len(dim(arr)[3])
outr <- setNames(lapply(iter, function(l) {
if (length(dim(arr)) == 3) {
arr2rast <- arr[ , , l]
} else {
arr2rast <- arr[ , ]
}
if(transpose) arr2rast <- raster::t(arr2rast)
resx <- x[2] - x[1]
resy <- abs(y[2] - y[1])
# coords
xmn = min(x) - 0.5 * resx
xmx = max(x) + 0.5 * resx
ymn = min(y) - 0.5 * resy
ymx = max(y) + 0.5 * resy
if(isMask) {
xmn = x[s_x] - 0.5 * resx
xmx = x[e_x] + 0.5 * resx
ymn = y[e_y] - 0.5 * resy
ymx = y[s_y]  + 0.5 * resy
mask2array <- as.matrix(raster::crop(spatial, raster::extent(xmn, xmx, ymn, ymx)))
arr2rast <- mask2array * arr2rast
}
rast <- raster::raster(arr2rast, xmn = xmn, xmx = xmx, ymn = ymn, ymx = ymx, crs = raster::crs(crs))
if(!is.null(flip)) rast <- raster::flip(rast, direction = flip)
return(rast)
}), nm = tempnm)
if(length(outr) == 1) outr <- outr[[1]]
ncdf4::nc_close(tmp)
return(outr)
}
msk <- ncdf2raster(pth = mskpth, transpose = TRUE, spatial = NULL)''
msk <- ncdf2raster(pth = mskpth, transpose = TRUE, spatial = NULL)
areacell <- ncdf2raster(pth = pthcellarea, transpose = TRUE, spatial = NULL)
tst <- ncdf2raster(pth = pth1, transpose = TRUE, time = 1)
tst2 <- ncdf2raster(pth = pth1, transpose = TRUE, time = 1, spatial = msk)
tst3 <- ncdf2raster(pth = pth1, transpose = TRUE, spatial = areacell)
stack(tst3)
raster::animate(stack(tst3), pause = 0.05)
